{"version":3,"sources":["reportWebVitals.js","ChessGame.js","ChessController.js","ChessView.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","files","pieces","w","b","ChessGame","this","listeners","player","opponent","turn","log","color","toggled","enpassant","inpromotion","over","winner","board","canCastleQueen","canCastleKing","r","c","push","id","value","update","event","getSquare","move","start","end","piece","fs","fileValue","fe","rs","parseInt","re","dr","df","passant","castle","pdr","withoutCheck","isEmptyBetween","Math","abs","isCastleAvailable","potential_move","isPotentialMove","map","sq","getBoardSquare","shift","king_pos","find","inCheck","note","getSquaresByVC","length","other","console","modelMove","model","basicNotation","testChecks","testMate","deployMate","pop","moveExists","king","validShift","pawns","p","knights","n","concat","kf","kr","checked","safeInDirection","safeFromKnights","f","square","attackers","includes","pos","filter","reduce","a","empty","mode","new_board","file","findIndex","info","forEach","l","listener","i","splice","nf","nr","ChessController","game","view","username","addListener","e","type","test","target","className","closest","toggleSquare","resetBoard","promote","querySelector","password","logIn","createGameOptions","alert","confirm","signIn","createLoginScreen","logOut","date","Date","month","getUTCMonth","day","getUTCDate","saveGame","getUTCFullYear","toString","loadGames","games","createCat","cat","addImage","createDog","dog","axios","method","url","data","result","codes","K","Q","R","B","N","columns","ChessView","ReactDOM","unmountComponentAtNode","document","getElementById","render","addEventListener","createLoginForm","createSignupForm","htmlFor","name","preventDefault","updateListeners","createOptionsReact","createColorSelect","createNewGame","width","loadGamesReact","props","setPlayer","getState","squares","getElementsByClassName","resetGame","src","classList","add","remove","firstChild","innerText","promos","ChessViewReact","Player","Board","alt","React","Component","sq_class","Square","window","configure"],"mappings":"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","file":"static/js/main.6ec4b4ea.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// BOARD COLUMN NAMES\r\nconst files = ['a','b','c','d','e','f','g', 'h'];\r\n// THE ORIENTATION OF PIECES from column a to column h, plus pawn at the end\r\nconst pieces = {\r\n    w: ['R','N','B','Q','K','B','N','R','p'],\r\n    b: ['R','N','B','K','Q','B','N','R','p'],\r\n}\r\n\r\n// A class representing a game of chess\r\nexport default class ChessGame {\r\n    // Create a new game, given the initial parameter of what color one is choosing\r\n    constructor() {\r\n        this.listeners = [];\r\n        // Define the player's color and opponent's color\r\n        this.player = '';\r\n        this.opponent = '';\r\n        // Other variables\r\n        this.turn = '';\r\n        // Create a game log\r\n        this.log = [];\r\n    }\r\n\r\n    setPlayer(color) {\r\n        this.player = color;\r\n        this.opponent = color === 'w' ? 'b' : 'w'; \r\n    }\r\n\r\n    // Resets the game board\r\n    resetBoard() {\r\n        // Defines if a square is toggled and which square is toggled\r\n        this.toggled = '';\r\n        // Defines whose turn it is, which is always white initially\r\n        this.turn = 'w';\r\n        this.log = [];\r\n        // Defines the location of a pawn that can be captured by \"en passant\"\r\n        this.enpassant = '';\r\n        // Defines the location of a pawn awaiting promotion\r\n        this.inpromotion = '';\r\n        // Defines whether the game is over or not\r\n        this.over = false;\r\n        // Defines whether the game has a winner or not\r\n        this.winner = '';\r\n        // The game is represented by a 64 length array of squares, each square given an id, piece value, and piece color\r\n        this.board = [];\r\n        // Determines if the king and queenside castles are available for black and white\r\n        this.canCastleQueen = {w: true, b: true};\r\n        this.canCastleKing = {w: true, b: true};\r\n        // Initialize the board id values and pieces\r\n        for (let r=0; r<8; r++) {\r\n            for (let c=0; c<8; c++) {\r\n                // If player is white, then start with a8 and black pieces, otherwise start with a1 and white pieces\r\n                this.board.push({\r\n                    id: `${this.player === 'w' ? files[c] : files[7-c]}${this.player==='w' ? (8-r) : (r+1)}`,\r\n                    color: r<2 ? this.opponent : r>5 ? this.player : \"\",\r\n                    value: r===0 || r===7 ? pieces[this.player][c] : r===1 || r===6 ? 'p' : '',\r\n                });\r\n            }\r\n        }\r\n        this.update({event: 'reset', board: this.board, player: this.player});\r\n    }\r\n    \r\n    // Toggle a specific square on the board\r\n    toggleSquare(id) {\r\n        if (this.getSquare(id).color === this.turn) {\r\n            if (this.toggled !== '') {\r\n                this.update({event: 'detoggle', id: this.toggled});\r\n            }\r\n            if (this.toggled !== id) {\r\n                this.toggled = id;\r\n                this.update({event: 'toggle', id: id});\r\n            } else {\r\n                this.toggled = '';\r\n            }  \r\n        } else if (this.toggled !== '') {\r\n            this.update({event: 'detoggle', id: this.toggled});\r\n            this.move(this.toggled, id);        \r\n            this.toggled = '';\r\n        }  \r\n    }\r\n\r\n    // HASMOVE\r\n    // Returns an array of if a basic move, enpassant move, and castle are possible (without considering check)\r\n    isPotentialMove(start, end) {\r\n        // Variables used to check for moves\r\n        let piece = this.getSquare(start).value;\r\n        let fs = this.fileValue(start[0]);\r\n        let fe = this.fileValue(end[0]);\r\n        let rs = parseInt(start[1]);\r\n        let re = parseInt(end[1]);\r\n        // Start and end must exist on the board\r\n        if (rs < 1 || rs > 8 || fs < 0 || fs > 8) return [false,false,false];\r\n        if (re < 1 || re > 8 || fe < 1 || fe > 8) return [false,false,false];\r\n        // End square clicked must not be same color as start square\r\n        if (this.getSquare(end).color === this.getSquare(start).color) return [false,false,false];\r\n        // Variables measuring distance traveled\r\n        let dr = re-rs;\r\n        let df = fe-fs;\r\n        // Boolean Variables\r\n        let passant = false;\r\n        let castle = false;\r\n        // CHECK IF THE PIECE CAN MOVE: Eliminate bad moves as early as possible (helps when checking for checkmate)\r\n        if (piece === 'p') {\r\n            // Use multiplication to always treat a proper move as being \"positive\" and thus prevent backwards moves\r\n            let pdr = dr * (this.turn === 'w' ? 1 : -1);\r\n            if (pdr < 1 || pdr > 2 || df < -1 || df > 1) {\r\n                return {withoutCheck: false, };\r\n            } else if (this.getSquare(end).color !== '') {\r\n                if (pdr === 2 || df === 0) return [false,false,false];\r\n            } else {\r\n                if (pdr === 2 && rs!==2 && rs!==7) return [false,false,false];\r\n                if (df !== 0) {\r\n                    if (this.enpassant === `${files[fe-1]}${rs}`) {\r\n                        passant = true;\r\n                    } else {\r\n                        return [false,false,false];\r\n                    }\r\n                }\r\n            }    \r\n        } else if (piece === 'N') {\r\n            if (df=== 2 || df=== -2) {\r\n                if (dr !== 1 && dr !== -1) return [false,false,false];\r\n            } else if (df=== 1 || df=== -1) {\r\n                if (dr !== 2 && dr !== -2) return [false,false,false];\r\n            } else {\r\n                return [false,false,false];\r\n            }\r\n        } else if (piece === 'R') {\r\n            if (dr !== 0 && df!== 0) return [false,false,false];\r\n            if (! this.isEmptyBetween(rs,re,fs,fe)) return [false,false,false];\r\n        } else if (piece === 'B') {\r\n            if (dr === 0 || df=== 0) return [false,false,false];\r\n            if (Math.abs(fe-fs) !== Math.abs(re-rs)) return [false,false,false];\r\n            if (! this.isEmptyBetween(rs,re,fs,fe)) return [false,false,false];\r\n        } else if (piece === 'Q') {\r\n            if (dr !== 0 && df !== 0 && Math.abs(fe-fs) !== Math.abs(re-rs)) return [false,false,false];\r\n            if (! this.isEmptyBetween(rs,re,fs,fe)) return [false,false,false];\r\n        } else {\r\n            if (dr > 1 || dr < -1) return [false,false,false];\r\n            if (df > 1 || df< -1) {\r\n                if (this.isCastleAvailable(start,end)) {\r\n                    castle = true;\r\n                } else {\r\n                    return [false,false,false]\r\n                }\r\n            }\r\n        }\r\n\r\n        return [true,passant,castle];\r\n    }\r\n\r\n    // Models a move and returns the state of the move success as well, if en-passant capture was performed, if castling was performed, and the updated board\r\n    modelMove(start, end) {\r\n        let potential_move = this.isPotentialMove(start,end);\r\n        if (! potential_move[0]) return [false,false,false,this.board];\r\n\r\n        // First, create a DEEP copy of the board (since items of the board are objects)\r\n        let board = this.board.map((sq) => ({...sq}));\r\n        // Model the basic move operations\r\n        this.getBoardSquare(board,end).value = this.getSquare(start).value;\r\n        this.getBoardSquare(board,end).color = this.turn;\r\n        this.getBoardSquare(board,start).value = '';\r\n        this.getBoardSquare(board,start).color = '';\r\n\r\n        // Perform additional en-passant functionality if needed\r\n        if (potential_move[1]) {\r\n            this.getBoardSquare(board,end[0]+start[1]).value = '';\r\n            this.getBoardSquare(board,end[0]+start[1]).color = '';\r\n        }\r\n\r\n        // Perform additional castling functionality if needed\r\n        if (potential_move[2]) {\r\n            this.getBoardSquare(board, this.shift(start,0,(end[0] === 'g' ? 1 : -1))).value = 'R';\r\n            this.getBoardSquare(board, this.shift(start,0,(end[0] === 'g' ? 1 : -1))).color = this.turn;\r\n            this.getBoardSquare(board, this.shift(start,0,(end[0] === 'g' ? 3 : -4))).value = '';\r\n            this.getBoardSquare(board, this.shift(start,0,(end[0] === 'g' ? 3 : -4))).color = '';\r\n        }\r\n\r\n        // Test for check\r\n        let king_pos = board.find((sq) => sq.value === 'K' && sq.color === this.turn).id;\r\n        if (this.inCheck(board,king_pos)) return [false,false,false,this.board];\r\n\r\n        // If the king is safe, then all is good, and can return true, if castle performed, and the updated value\r\n        return [true, potential_move[1],potential_move[2], board];\r\n    }\r\n\r\n    // Converts a valid move on the current board to basic chess notation\r\n    basicNotation(start,end) {\r\n        let value = this.getSquare(start).value;\r\n        // Notation for pawn moves\r\n        if (value === 'p') {\r\n            if (start[0] === end[0]) {\r\n                return end;\r\n            } else {\r\n                return start[0]+'x'+end;\r\n            }\r\n        } \r\n        // Notation for pieces where ambiguity cannot exist\r\n        if (value === 'Q' || value === 'K' || value === 'B') {\r\n            if (this.getSquare(end).color === '') {\r\n                return value+end;\r\n            } else {\r\n                return value+'x'+end;\r\n            }\r\n            // Notation for all other pieces (where ambiguity could exist)\r\n        } else {\r\n            let note = (this.getSquare(end).color !== '' ? 'x' : '') + end ;\r\n            let pieces = this.getSquaresByVC(value,this.turn);\r\n            if (pieces.length > 1) {\r\n                let other = pieces.map((sq) => sq.id).find((id) => id !== start);\r\n                console.log(other);\r\n                if (this.modelMove(other,end)[0]) {\r\n                    if (other[0] === start[0]) {\r\n                        return value+start[1]+note;\r\n                    } else {\r\n                        return value+start[0]+note;\r\n                    }\r\n                }\r\n            } \r\n            return value+note;\r\n        }\r\n    }\r\n\r\n    // Models a move and implements if the model is successful\r\n    move(start,end) {\r\n        let model = this.modelMove(start,end);\r\n        if (! model[0]) return;\r\n\r\n        // Create a chess notation representation of the move\r\n        let note = '' \r\n        if (! model[2]) {\r\n            note = this.basicNotation(start,end);\r\n        }\r\n\r\n        // Update the board, whose turn it is, and other information if needed\r\n        // Sends updates to the view\r\n        this.board = model[3];\r\n        this.update({event: 'empty', id: start});\r\n        this.update({\r\n            event: 'setValue', \r\n            id: end, \r\n            value: this.getSquare(end).value,\r\n            color: this.getSquare(end).color,\r\n        });\r\n\r\n        \r\n        // If a pawn reached rank 8, update the view about promotion and return\r\n        if (this.getSquare(end).value === 'p') {\r\n            if ((end[1] === '1' && this.turn === 'b') || (end[1] === '8' && this.turn === 'w')) {\r\n                this.update({event: 'promote', id: end, color: this.turn});\r\n                this.inpromotion = end;\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Performs an additional update if an en-passant capture occured\r\n        if (model[1]) {\r\n            this.update({event: 'empty', id: end[0]+start[1]});\r\n        }\r\n        // Updates the en-passant value\r\n        if (this.getSquare(end).value === 'p' && Math.abs(parseInt(start[1])-parseInt(end[1]))>1) {\r\n            this.enpassant = end;\r\n        } else {\r\n            this.enpassant = '';\r\n        }\r\n\r\n        // Updates the view and notation if castling was performed\r\n        if (model[2]) {\r\n            this.canCastleKing[this.turn] = false;\r\n            this.canCastleQueen[this.turn] = false;\r\n            note = end[0] === 'g' ? 'O-O' : 'O-O-O'\r\n            this.update({event: 'empty', id: (end[0] === 'g' ? 'h' : 'a')+end[1]});\r\n            this.update({\r\n                event: 'setValue',\r\n                id: (end[0] === 'g' ? 'f' : 'd')+end[1],\r\n                value: 'R',\r\n                color: this.turn,\r\n            });\r\n        }\r\n        \r\n        // Update castling information and the notation if the king or rook moved\r\n        if (this.canCastleKing[this.turn]) {\r\n            if (start === (this.turn === 'w' ? 'e1' : 'e8') || start === (this.turn === 'w' ? 'h1' : 'h8')) {\r\n                this.canCastleKing[this.turn] = false;\r\n            }\r\n        } else if (this.canCastleQueen[this.turn]) {\r\n            if (start === (this.turn === 'w' ? 'e1' : 'e8') || start === (this.turn === 'w' ? 'a1' : 'a8')) {\r\n                this.canCastleQueen[this.turn] = false;\r\n            }\r\n        }\r\n\r\n        // Updates the turn\r\n        this.turn = this.turn === 'w' ? 'b' : 'w';\r\n\r\n        // Test for mate and check\r\n        note = this.testChecks(note);\r\n        // Log the notation on at the end\r\n        this.log.push(note);\r\n        console.log(this.log);\r\n    }\r\n\r\n    // Promotes a square at a given square\r\n    // No need to update the view since the view initiated the promotion\r\n    // However, with the new piece promoted, update turn, check for mate, and update notation\r\n    promote(value) {\r\n        let note = this.inpromotion+\"=\"+value;\r\n        this.getSquare(this.inpromotion).value = value;\r\n        this.inpromotion = \"\";\r\n        this.turn = this.turn === 'w' ? 'b' : 'w';\r\n        this.testChecks(note)\r\n        this.log.push(note);\r\n        console.log(this.log);\r\n    }\r\n\r\n    deployMate() {\r\n        // If a mate has occured, then game is over\r\n        this.over = true;\r\n        // Retrieve the king position\r\n        let king_pos = this.board.find((sq) => sq.value === 'K' && sq.color === this.turn).id; \r\n        // If king is in check, then set the winner of the game to be the person who just went\r\n        if (this.inCheck(this.board, king_pos)) this.winner = this.turn === 'w' ? 'b' : 'w';\r\n        // Update the view that the game is over\r\n        this.update({event: 'end', winner: this.winner});\r\n    }\r\n\r\n    testChecks(note) {\r\n        // Test for mate and check\r\n        if (this.testMate()) {\r\n            this.deployMate(); \r\n            if (this.winner !== '') note = note + \"#\";\r\n            // Test for non-mate check (for notation purposes)\r\n        } else {\r\n            let king_pos = this.getSquaresByVC('K',this.turn).pop().id;\r\n            if (this.inCheck(this.board, king_pos)) note = note + \"+\";\r\n        }\r\n        return note;\r\n    }\r\n\r\n    // Test for checkmate/statemate\r\n    testMate() {\r\n        // Create a boolean \r\n        let moveExists = false;\r\n        // First, test to see if the king can move\r\n        let king = this.getSquaresByVC('K',this.turn).pop().id;\r\n        for (let dr=-1; dr<2; dr++) {\r\n            for (let df=-1; df<2; df++) {\r\n                if (this.validShift(king,dr,df)) {\r\n                    if (this.modelMove(king,this.shift(king,dr,df))[0]) {\r\n                        moveExists = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (moveExists) break;\r\n        }\r\n        if (moveExists) return false;\r\n\r\n        // Next, test to see if any of the pawns can move\r\n        let pawns = this.getSquaresByVC('p',this.turn);\r\n        for (const p of pawns.map((p) => p.id)) {\r\n            // No need to test for \"move up two\" moves: if a pawn can't move forward 1, then can't move forward 2\r\n            for (const df of [0,-1,1]) {\r\n                let dr = this.turn === 'w' ? 1 : -1;\r\n                if (this.validShift(p,dr,df)) {\r\n                    if (this.modelMove(p,this.shift(p,dr,df))[0]) {\r\n                        moveExists = true;\r\n                        break;\r\n                    }\r\n                } \r\n            }\r\n            if (moveExists) {\r\n                break;\r\n            }\r\n        }\r\n        if (moveExists) return false;\r\n\r\n        // Next, test the knights\r\n        let knights = this.getSquaresByVC('N',this.turn);\r\n        for (const n of knights.map((n) => n.id)) {\r\n            for (let dr=-2; dr<3; dr++) {\r\n                for (let df=-2; df<3; df++) {\r\n                    if (this.validShift(n,dr,df)) {\r\n                        if (this.modelMove(n,this.shift(n,dr,df))[0]) {\r\n                            moveExists = true;\r\n                            break;\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n            if (moveExists) break;\r\n        }\r\n        if (moveExists) return false;\r\n\r\n        // Finally, test all of the other pieces by seeing if they have a move in any given direction\r\n        let pieces = this.getSquaresByVC('Q',this.turn).concat(this.getSquaresByVC('R',this.turn)).concat(this.getSquaresByVC('B',this.turn));\r\n        for (const p of pieces.map((p) => p.id)) {\r\n            for (let dr=-1; dr<2; dr++) {\r\n                for (let df=-1; df<2; df++) {\r\n                    // If a piece can move one square in a direction, then they can move any squares in that direction\r\n                    if (this.validShift(p,dr,df)) {\r\n                        if (this.modelMove(p,this.shift(p,dr,df))[0]) {\r\n                            moveExists = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (moveExists) break;\r\n        }\r\n        // If none of the pieces can move, return true\r\n        return ! moveExists;\r\n    }\r\n\r\n    // Tests to see if a piece is \"in check\" within a given board\r\n    inCheck(board, king_pos) {\r\n        // Now that the move has been modeled on the board, see if the king is under attack afterwards\r\n        let kf = this.fileValue(king_pos[0]);\r\n        let kr = parseInt(king_pos[1]);\r\n        let checked = false;\r\n        for (let dr=-1; dr<2; dr++) {\r\n            for (let df=-1; df<2; df++) {\r\n                // This if statement is needed to prevent an infinite \"safe in direction\" loop\r\n                if (dr !== 0 || df !== 0) {\r\n                    if (! this.safeInDirection(board, kr, kf, dr, df)) {\r\n                        checked = true;\r\n                        break; \r\n                    }\r\n                }\r\n            }\r\n            if (checked) break;\r\n        }\r\n        \r\n        if (checked) return true;\r\n        return ! this.safeFromKnights(board,king_pos)\r\n    }\r\n    \r\n    // Given a board, starting position and direction, sees if the position is under attack by an opponent\r\n    safeInDirection(board, rs, fs, dr, df) {\r\n        let r = rs+dr;\r\n        let f = fs+df;\r\n        while (r > 0 && r < 9 && f > 0 && f < 9) {\r\n            let square = this.getBoardSquare(board,files[f-1]+r);\r\n            if (square.color !== '') {\r\n                // Return if a like-colored square is found\r\n                if (square.color === this.turn) {\r\n                    return true;\r\n                    // Otherwise, test for specific square values\r\n                } else {\r\n                    let attackers = ['Q']\r\n                    if (dr !== 0 && df !== 0) {\r\n                        attackers.push('B');\r\n                    } else {\r\n                        attackers.push('R');\r\n                    }\r\n                    if (Math.abs(f-fs) < 2 && Math.abs(r-rs) < 2) {\r\n                        attackers.push('K');\r\n                        if (Math.abs(f-fs) === 1 && (this.turn === 'w' ? (r-rs) === 1 : (r-rs) === -1)) {\r\n                            attackers.push('p')\r\n                        }\r\n                    }\r\n                    return ! attackers.includes(square.value);\r\n                }\r\n            }\r\n            r += dr;\r\n            f += df;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Given a starting position and board, sees if the position is under attack by knights\r\n    safeFromKnights(board, pos) {\r\n        // Retrieve the ids of all knights with same color as king\r\n        let knights = board.filter((sq) => sq.value === 'N' && sq.color !== this.turn);\r\n        if (knights.length === 0) return true;\r\n        return ! (knights.map((sq) => this.isPotentialMove(sq.id,pos)[0]).reduce((a,b) => a || b));\r\n    }\r\n    \r\n    // Checks to see if there are only empty squares on a path between two squares\r\n    isEmptyBetween(rs, re, fs, fe) {\r\n        let dr = (re-rs > 0 ? 1 : re-rs < 0 ? -1 : 0);\r\n        let df = (fe-fs > 0 ? 1 : fe-fs < 0 ? -1 : 0);\r\n        let r = rs+dr;\r\n        let f = fs+df;\r\n        let empty = true;\r\n        while (r !== re || f !== fe) {\r\n            empty = this.getSquare(files[f-1]+r).value === '';\r\n            r += dr;\r\n            f += df;\r\n        }\r\n        return empty;\r\n    }\r\n\r\n    // Checks to see if a castle is possible\r\n    isCastleAvailable(start,end) {\r\n        // King cannot castle while in check\r\n        if (this.inCheck(this.board,start)) return false;\r\n        let color = this.getSquare(start).color;\r\n        if (start === 'e1' && color === 'w') {\r\n            if (end === 'g1' && this.canCastleKing.w) {\r\n                if (this.isEmptyBetween(1,1,5,7)) {\r\n                    // King cannot be attacked in square f1 (modelMove later checks for square g1)\r\n                    return ! this.inCheck(this.board,'f1');\r\n                }\r\n            } else if (end === 'c1' && this.canCastleQueen.w) {\r\n                if (this.isEmptyBetween(1,1,5,3)) {\r\n                    // King cannot be attacked in square d1 (modelMove later checks for square b1)\r\n                    return ! this.inCheck(this.board,'d1');\r\n                }\r\n            }\r\n        } else if (start === 'e8' && color === 'b') {\r\n            if (end === 'g8' && this.canCastleKing.b) {\r\n                if (this.isEmptyBetween(8,8,5,7)) {\r\n                    // King cannot be attacked in square f1 (modelMove later checks for square g1)\r\n                    return ! this.inCheck(this.board,'f8');\r\n                }\r\n            } else if (end === 'c8' && this.canCastleQueen.b) {\r\n                if (this.isEmptyBetween(8,8,5,3)) {\r\n                    // King cannot be attacked in square d1 (modelMove later checks for square b1)\r\n                    return ! this.inCheck(this.board,'d8');\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Returns the id of the current toggled square\r\n    getToggledSquare() {\r\n        return this.toggled;\r\n    }\r\n\r\n    // Return an object representing the state of the game\r\n    getState() {\r\n        return { mode: this.mode, player: this.player, turn: this.turn, toggled: this.toggled, board: this.board };\r\n    }\r\n\r\n    // Gets the square with a given id\r\n    getSquare(id) {\r\n        return this.board.find((square) => square.id === id);\r\n    }\r\n\r\n    getBoardSquare(new_board,id) {\r\n        return new_board.find((square) => square.id === id);\r\n    }\r\n\r\n    // Returns an array of squares with a given value\r\n    getSquaresByVC(value, color) {\r\n        return this.board.filter((sq) => sq.value === value && sq.color === color);\r\n    }\r\n\r\n    // Returns the number corresponding to a filename\r\n    fileValue(file) {\r\n        return files.findIndex((f) => f === file)+1;\r\n    }\r\n    \r\n    emptySquare(id) {\r\n        this.getSquare(id).color = '';\r\n        this.getSquare(id).value = '';\r\n        this.update({event: 'empty', id: id});\r\n    }\r\n\r\n    // LISTENER METHODS\r\n    update(info) {\r\n        this.listeners.forEach((l) => l(info));\r\n    }\r\n\r\n    addListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    removeListener(listener) {\r\n        let i = this.listeners.findIndex((l) => l === listener);\r\n        if (i !== -1) this.listeners.splice(i, 1);\r\n    }\r\n    \r\n    // Shifts a square by a given rank and file increment\r\n    shift(id,dr,df) {\r\n        return files[this.fileValue(id[0])+df-1] + (parseInt(id[1])+dr);\r\n    }\r\n\r\n    // Returns true if the shift is valid, false otherwise\r\n    validShift(id,dr,df) {\r\n        let nf = this.fileValue(id[0])+df;\r\n        let nr = parseInt(id[1]) + dr;\r\n        return (nf > 0 && nf < 9 && nr > 0 && nr < 9);\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport default class ChessController {\r\n    constructor(game, view, username) {\r\n        this.game = game;\r\n        this.view = view;\r\n        this.username = '';\r\n    }\r\n\r\n    // Configures a game based on the current model and view\r\n    configure() {\r\n        // Add update method as a listener of the view\r\n        this.view.addListener((e) => this.update(e));\r\n    }\r\n\r\n    async update(event) {\r\n        if(event.type === 'click') {\r\n            // If clicking on a square or a piece value, instruct the model to toggle a square\r\n            if (/square*|value*/.test(event.target.className)) {\r\n                console.log(event.target.closest('.square').id);\r\n                this.game.toggleSquare(event.target.closest('.square').id);\r\n            } else if (event.target.id === 'reset') {\r\n                this.game.resetBoard();\r\n            } else if (event.target.className === 'promo toggled') {\r\n                this.game.promote(event.target.id[1]);\r\n            } else if (event.target.id === 'login') {\r\n                let username = event.target.closest('form').querySelector('#username').value;\r\n                let password = event.target.closest('form').querySelector('#password').value;\r\n                 if (await logIn(username,password)) {\r\n                     this.username = username;\r\n                     this.view.createGameOptions();\r\n                 } else {\r\n                    alert('Invalid username or password');\r\n                 }\r\n            } else if (event.target.id === 'signup') {\r\n                let username = event.target.closest('form').querySelector('#username').value;\r\n                let password = event.target.closest('form').querySelector('#password').value;\r\n                let confirm = event.target.closest('form').querySelector('#confirm').value;\r\n                if (password === confirm) {\r\n                    if (await signIn(username,password,confirm)) {\r\n                        this.view.createLoginScreen();\r\n                        alert('Signup Successful! Ready to login.');\r\n                    } else {\r\n                        alert('Username already exists');\r\n                    }\r\n                } else {\r\n                    alert('Password does not match confirmed password value');\r\n                }\r\n            } else if (event.target.id === 'logout') {\r\n                await logOut(this.username);\r\n                this.username = '';\r\n                this.view.createLoginScreen();\r\n            } else if (event.target.id === 'save') {\r\n                let date = new Date();\r\n                let month = date.getUTCMonth() < 9 ? '0'+(date.getUTCMonth()+1) : date.getUTCMonth()+1\r\n                let day = date.getUTCDate() < 9 ? '0'+(date.getUTCDate()+1) : date.getUTCDate()+1\r\n                if (await saveGame(\r\n                    this.username,\r\n                    this.game.player,\r\n                    `${date.getUTCFullYear()}-${month}-${day}`,\r\n                    this.game.log.toString()\r\n                )) alert('Game saved');\r\n            } else if (event.target.id === 'load') {\r\n                let games = await loadGames(this.username);\r\n                this.view.loadGames(games);\r\n            } else if (event.target.id === 'cat') {\r\n                const cat = await createCat();\r\n                this.view.addImage(cat);\r\n            } else if (event.target.id === 'dog') {\r\n                const dog = await createDog();\r\n                this.view.addImage(dog);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport async function createDog() {\r\n    const dog = await axios({\r\n        method: 'get',\r\n        url: 'https://dog.ceo/api/breeds/image/random'    \r\n    });\r\n    return dog.data['message'];\r\n}\r\n\r\nexport async function createCat() {\r\n    const cat = await axios({\r\n        method: 'get',\r\n        url: 'https://aws.random.cat/meow',\r\n    });\r\n    return cat.data['file'];\r\n}\r\n\r\nexport async function fn1() {\r\n    const result = await axios({\r\n        method: 'get',\r\n        url: 'http://localhost:5000/'\r\n    });\r\n    console.log(result.data);\r\n    return result.data;\r\n};\r\n\r\nexport async function signIn(username,password,confirm) {\r\n    try {\r\n        await axios({\r\n            method: 'get',\r\n            url: `http://localhost:5000/signup?username=${username}&password=${password}&confirm=${confirm}`,\r\n        });\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport async function logIn(username,password) {\r\n    try {\r\n        await axios({\r\n            method: 'post',\r\n            url: 'http://localhost:5000/login',\r\n            data: {\r\n                'username': username,\r\n                'password': password,\r\n            }\r\n        });\r\n    } catch(error) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport async function logOut(username) {\r\n    await axios({\r\n        method: 'get',\r\n        url: `http://localhost:5000/logout?username=${username}`,\r\n    });\r\n}\r\n\r\nexport async function fn5() {\r\n    const result = await axios({\r\n        method: 'post',\r\n        url: 'http://localhost:5000/save',\r\n        data: {\r\n            'username': 'ckoonce',\r\n            'color': 'w',\r\n            'date': '2020-06-10',\r\n            'log': '[e4, e5]'\r\n        }\r\n    })\r\n    console.log(result.data)\r\n}\r\n\r\nexport async function saveGame(username,color,date,log) {\r\n    await axios({\r\n        method: 'post',\r\n        url: 'http://localhost:5000/save',\r\n        data: {\r\n            'username': username,\r\n            'color': color,\r\n            'date': date,\r\n            'log': log\r\n        }\r\n    });\r\n    return true;\r\n}\r\n\r\nexport async function loadGames(username) {\r\n    const result = await axios({\r\n        method: 'get',\r\n        url: `http://localhost:5000/load?username=${username}`,\r\n    });\r\n    return result.data;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css';\r\n\r\n// CHESS UNICODE SEQUENCES\r\nconst codes = {\r\n    K: {w: '\\u2654', b: '\\u265A'}, \r\n    Q: {w: '\\u2655', b: '\\u265B'},\r\n    R: {w: '\\u2656', b: '\\u265C'},\r\n    B: {w: '\\u2657', b: '\\u265D'},\r\n    N: {w: '\\u2658', b: '\\u265E'},\r\n    p: {w: '\\u2659', b: '\\u265F'}\r\n};\r\n// COLUMN NAMES OF THE BOARD\r\nconst columns = ['a','b','c','d','e','f','g','h'];\r\n\r\nexport default class ChessView {\r\n    // Set up the view based on the game\r\n    constructor(game) {\r\n        // Save the game\r\n        this.game = game;\r\n        // Initialize the list of listeners\r\n        this.listeners = []\r\n        // Add this view's update method as an event listener of the game\r\n        game.addListener((info) => this.update(info));\r\n        // Go ahead and setup the login screen\r\n        this.createLoginScreen();\r\n        // Create a new game\r\n    }\r\n\r\n    createLoginScreen() {\r\n        createLoginReact();\r\n        document.getElementById('login').addEventListener('click',(e) => this.createLoginForm(e));\r\n        document.getElementById('signup').addEventListener('click',(e) => this.createSignupForm(e));\r\n    }\r\n    \r\n    createLoginForm() {\r\n        createLoginFormReact();\r\n        document.getElementById('login').addEventListener('click',(e) => {\r\n            e.preventDefault();\r\n            this.updateListeners(e);\r\n        });\r\n        document.getElementById('cancel').addEventListener('click',(e) => this.createLoginScreen(e));\r\n    }\r\n\r\n    createSignupForm() {\r\n        createSignupFormReact();\r\n        document.getElementById('signup').addEventListener('click',(e) => {\r\n            e.preventDefault();\r\n            this.updateListeners(e);\r\n        });\r\n        document.getElementById('cancel').addEventListener('click',(e) => this.createLoginScreen(e));\r\n    }\r\n\r\n    createGameOptions() {\r\n        createOptionsReact('load');\r\n        document.getElementById('new').addEventListener('click',(e) => this.createColorSelect(e));\r\n        document.getElementById('load').addEventListener('click',(e) => this.updateListeners(e));\r\n    }\r\n\r\n    resetGame(event) {\r\n        this.listeners.forEach((l) => l(event));\r\n        this.createNewGame(this.game.player);\r\n    }\r\n\r\n    loadGames(games) {\r\n        loadGamesReact(games);\r\n        document.getElementById('back').addEventListener('click',(e) => this.createGameOptions(e));\r\n        document.getElementById('logout').addEventListener('click',(e) => this.updateListeners(e));\r\n    }\r\n\r\n    createNewGame(color) {\r\n        // Set the player color of the game\r\n        this.game.setPlayer(color);\r\n        // Reset the game board\r\n        this.game.resetBoard();\r\n        // Load all elements into the DOM initially using React\r\n        createNewChessView(this.game.getState());\r\n        // Add click event listeners to all squares\r\n        let squares = document.getElementsByClassName('square');\r\n        for (let i=0; i<squares.length; i++) {\r\n            squares[i].addEventListener('click', (e) => this.updateListeners(e));\r\n        }\r\n        // Add listeners to the buttons\r\n        document.getElementById('reset').addEventListener('click', (e) => this.resetGame(e));\r\n        document.getElementById('save').addEventListener('click',(e) => this.updateListeners(e));\r\n        document.getElementById('newgame').addEventListener('click',(e) => this.createGameOptions(e));\r\n        document.getElementById('logout').addEventListener('click',(e) => this.updateListeners(e));\r\n        document.getElementById('cat').addEventListener('click',(e) => this.updateListeners(e));\r\n        document.getElementById('dog').addEventListener('click',(e) => this.updateListeners(e));\r\n    }\r\n\r\n    createColorSelect() {\r\n        createOptionsReact('color');\r\n        document.getElementById('white').addEventListener('click',(e) => this.createNewGame('w'));\r\n        document.getElementById('black').addEventListener('click',(e) => this.createNewGame('b'));\r\n    }\r\n\r\n    addImage(url) {\r\n        console.log(url);\r\n        document.getElementById('randimg').src = url;\r\n    }\r\n\r\n    updateListeners(event) {\r\n        this.listeners.forEach((l) => l(event));\r\n    }\r\n\r\n    addListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    removeListener(listener) {\r\n        let i = this.listeners.findIndex((l) => l === listener);\r\n        if (i !== -1) this.listeners.splice(i, 1);\r\n    }\r\n\r\n    // Updates the game according to certain info parameters passed down.\r\n    update(info) {\r\n        if (info.event === 'toggle') {\r\n            document.getElementById(info.id).classList.add('toggled');\r\n        } else if (info.event === 'detoggle') {\r\n            document.getElementById(info.id).classList.remove('toggled');\r\n        } else if (info.event === 'empty') {\r\n            console.log(`Empty At ${info.id}`);\r\n            document.getElementById(info.id).firstChild.innerText = \"\";\r\n        } else if (info.event === 'setValue') {\r\n            document.getElementById(info.id).firstChild.innerText = codes[info.value][info.color];\r\n        } else if (info.event === 'end') {\r\n            console.log(\"Game Over\");\r\n            console.log(`${info.winner} Wins!`);\r\n        } else if (info.event === 'promote') {\r\n            createPromotionRibbon(info.color);\r\n            let promos = document.getElementsByClassName('promo')\r\n            for (let i=0; i<promos.length; i++) {\r\n                promos[i].addEventListener('mouseover', (e) => e.target.classList.add('toggled'));                \r\n                promos[i].addEventListener('click',(e) => {\r\n                    this.updateListeners(e);\r\n                    document.getElementById(info.id).firstChild.innerText = codes[e.target.id[1]][info.color];\r\n                    removePromotionRibbon();\r\n                });\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction loadGamesReact(games) {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n    ReactDOM.render(\r\n       <div className=\"flex\">\r\n           <table>\r\n                <thead>\r\n               <tr key=\"headers\">\r\n                   <th key=\"idh\" width=\"75px\">Game ID</th>\r\n                   <th key=\"colorh\" width=\"50px\">Color</th>\r\n                   <th key=\"dateh\" width=\"100px\">Date</th>\r\n                   <th key=\"logh\" width=\"200px\">Game Log</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n               {games.map((game) =>\r\n                   <tr key={game['id']}>\r\n                       <td key={game['id']+\"id\"}>{game['id']}</td>\r\n                       <td key={game['id']+\"color\"}>{game['color']}</td>\r\n                       <td key={game['id']+\"date\"}>{game['date']}</td>\r\n                       <td key={game['id']+\"log\"}>{game['log']}</td>\r\n                    </tr>\r\n               )}\r\n               </tbody>\r\n           </table>\r\n           <div>\r\n            <button id='back'>Go Back</button>\r\n            <button id='logout'>Logout</button>\r\n           </div>\r\n       </div>,\r\n       document.getElementById('root')\r\n    );\r\n}\r\n\r\nfunction createOptionsReact(type) {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n    ReactDOM.render(\r\n        <div className=\"flex\">\r\n            <h1>{type === 'load' ? 'Select an Option' : 'Select Color'}</h1>\r\n            <div>\r\n                <button id={type === 'load' ? 'load' : 'white'}>\r\n                    {type === 'load' ? 'View Existing Games' : 'White'}\r\n                </button>\r\n                <button id={type === 'load' ? 'new' : 'black'}>\r\n                    {type === 'load' ? 'Create New Game' : 'Black'}\r\n                </button>\r\n            </div>\r\n        </div>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\n\r\nfunction createLoginFormReact() {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n    ReactDOM.render(\r\n        <div className=\"flex\">\r\n            <h1>Login to Chess10</h1>\r\n        <form className = \"flex\">\r\n            <label htmlFor=\"username\">Username: </label>\r\n            <input type=\"text\" name=\"username\" id=\"username\"></input><br />\r\n            <label htmlFor=\"password\">Password:  </label>\r\n            <input type=\"password\" name=\"password\" id=\"password\"></input><br />\r\n            <div>\r\n                <button type=\"submit\" id=\"login\">Submit</button>\r\n                <button id=\"cancel\">Cancel</button>\r\n            </div>\r\n        </form>\r\n        </div>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nfunction createSignupFormReact() {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'))\r\n    ReactDOM.render(\r\n        <div className=\"flex\">\r\n            <h1>Login to Chess10</h1>\r\n        <form className = \"flex\">\r\n            <label htmlFor=\"username\">Username: </label>\r\n            <input type=\"text\" name=\"username\" id=\"username\"></input><br />\r\n            <label htmlFor=\"password\">Password:  </label>\r\n            <input type=\"password\" name=\"password\" id=\"password\"></input><br />\r\n            <label htmlFor=\"confirm\">Confirm Password:  </label>\r\n            <input type=\"password\" name=\"confirm\" id=\"confirm\"></input><br />\r\n            <div>\r\n                <button type=\"submit\" id=\"signup\">Submit</button>\r\n                <button id=\"cancel\">Cancel</button>\r\n            </div>\r\n        </form>\r\n        </div>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\n\r\nfunction createLoginReact() {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'))\r\n    ReactDOM.render(\r\n        <div className=\"flex\">\r\n            <h1>Welcome to Chess10</h1>\r\n            <div>\r\n                <button id=\"login\">Login</button>\r\n                <button id=\"signup\">Signup</button>\r\n            </div>\r\n        </div>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nfunction removePromotionRibbon() {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('promodiv'));\r\n}\r\n\r\nfunction createPromotionRibbon(color) {\r\n    ReactDOM.render(\r\n        <div>\r\n            <p>Select Promotion Piece</p>\r\n            <div className = \"promos\">\r\n                <div className = \"promo\" id=\"pQ\">{codes['Q'][color]}</div>\r\n                <div className = \"promo\" id=\"pN\">{codes['N'][color]}</div>\r\n                <div className = \"promo\" id=\"pB\">{codes['B'][color]}</div>\r\n                <div className = \"promo\" id=\"pR\">{codes['R'][color]}</div>\r\n            </div>\r\n        </div>,\r\n        document.getElementById('promodiv')\r\n    );\r\n}\r\n\r\nfunction createNewChessView(props) {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n    ReactDOM.render(\r\n      <ChessViewReact\r\n        board = {props.board}\r\n        player = {props.player}\r\n        toggled = {props.toggled}\r\n      />,\r\n      document.getElementById('root')\r\n    );\r\n  }\r\n\r\nclass ChessViewReact extends React.Component {\r\n    render() {\r\n      return (\r\n        <div id=\"game\">\r\n            <div><h1>Play Chess</h1></div>\r\n            <div className=\"player\">\r\n                <Player\r\n                    player = {this.props.player === 'w' ? 'b' : 'w'}             \r\n                />\r\n            </div>\r\n            <div id =\"promodiv\"></div>\r\n            <div className = \"board\">\r\n                <Board\r\n                    board = {this.props.board}\r\n                    player = {this.props.player}\r\n                    toggled = {this.props.toggled}\r\n                />\r\n            </div>\r\n            <div className=\"player\">\r\n                <Player\r\n                    player = {this.props.player}             \r\n                />\r\n            </div>\r\n            <div className = \"ribbon\">\r\n                <button id=\"reset\">Reset Board</button>\r\n                <button id=\"save\">Save Game</button>\r\n                <button id=\"newgame\">New Game</button>\r\n                <button id=\"logout\">Logout</button>\r\n            </div>\r\n            <div>\r\n                <button id=\"cat\">I'm a Cat Person</button>\r\n                <button id=\"dog\">I'm a Dog Person</button>\r\n            </div>\r\n            <div>\r\n                <img id='randimg' src ='' alt=''></img>\r\n            </div>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n  \r\nfunction Board(props) {\r\n    return props.board.map((square) => {\r\n        let r = square.id[1];\r\n        let c = columns.findIndex((c) => c === square.id[0]);\r\n        let color = (\r\n            r % 2 ^ c % 2 ? 'dark' : 'light'\r\n        );\r\n        let sq_class = `square ${color} ${props.toggled === square.id ? 'toggled' : ''}`\r\n        return (\r\n        <div \r\n            key = {square.id}\r\n            className = {sq_class}\r\n            id = {square.id}\r\n        >\r\n            <Square \r\n                value={square.value}\r\n                color={square.color}\r\n            />\r\n        </div>\r\n        );\r\n    });\r\n}\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <span className = \"value\">\r\n            {props.value === \"\" ? \"\" : codes[props.value][props.color]} \r\n        </span>\r\n    )\r\n}\r\n\r\nfunction Player(props) {\r\n    return <div></div>\r\n}","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ChessGame from './ChessGame';\nimport ChessController from './ChessController'\nimport ChessView from './ChessView.js';\n\n\nwindow.addEventListener('load', () => {\n  // Create the game\n  let game = new ChessGame('singleplayer','w');\n  // Retrieve the reference to the view root\n  let view = new ChessView(game);\n  // Create a new controller given the model and view\n  let controller = new ChessController(game, view);\n  // Configure the controller to set up the new game's event handlers\n  controller.configure();\n});\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}